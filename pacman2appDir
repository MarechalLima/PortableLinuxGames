#!/bin/bash

pg4l_dir=$(dirname $(readlink -f $0))

shopt -s extglob # Enable extended globs

case $(cat /etc/issue | head -n 1) in
	Arch*)
		find_dependencies_package() { pacman -Si $1 | egrep "Depends On" | grep -v None | cut -d: -f2; }
		find_dependencies_file() { pacman -Qip $1 | egrep "Depends On" | grep -v None | cut -d: -f2; }
		find_version_file() { v=$(pacman -Qip $1 | egrep "Version" | egrep -v None | cut -d: -f2); echo ${v%-*}; }
		find_package_file() { v=$(pacman -Qip $1 | egrep "Name" | egrep -v None | cut -d: -f2); echo $v | sed -e "s/^ *//"; }
		find_file_for_package() { ls -1t /var/cache/pacman/pkg/$1-+([^-])-+([0-9])-+([^.]).pkg.tar.xz 2>/dev/null| head -n1; }
		uncompress_package_file() { tar -xf $1; }
		download_package() {
			case "$1" in
			aur*)
				pkg=${1#aur:}
				[ $(find_file_for_package "$pkg") ] && { echo "Package $pkg already downloaded"; return; }

				echo "Building $pkg ..."
				pushd /tmp || exit 1
					yaourt -G "$pkg" || exit 1
					pushd "$pkg" || exit 1
						makepkg -d || exit 1
						f=$(echo ${pkg}*.pkg.tar.xz)
						sudo mv -v "$f" /var/cache/pacman/pkg/ || exit 1
					popd
					rm -rf "$pkg"
				popd
				;;
			*)
				sudo pacman -Swdd --noconfirm "$1"
				;;
			esac
		}
		;;
	Ubuntu* | Debian*)
		find_dependencies_package() { apt-get info $1; }
		find_dependencies_file() { dpkg info $1; }
		find_version_file() { v=$(pacman -Qip $1 | egrep "Version" | grep -v None | cut -d: -f2); echo ${v%-*}; }
		find_package_file() { v=$(pacman -Qip $1 | egrep "Name" | egrep -v None | cut -d: -f2); echo $v | sed -e "s/^ *//"; }
		find_file_for_package() { ls -1t /var/cache/pacman/pkg/$1-+([^-])-+([0-9])-+([^.]).pkg.tar.xz 2>/dev/null| head -n1; }
		uncompress_package_file() { dpkg -d $1; }
		download_package() { apt-get download "$1"; }
		;;
	*)
		echo "Distro not supported"
		exit 1
		;;
esac

DOWNLOAD=1
UNPACK=1
CLEANUP=1
BRINGUP=1

AUTO=
AUTOCOPYLIBS=1



MainPackageExec=
MainPackageVersion=
Suffix=-archlinux

pkgs=
files=
ignore="hicolor-icon-theme"


# Recolect list of packages
for i in $@; do
	case $i in
		--skip-download) DOWNLOAD=; shift ;;
		--skip-unpack) UNPACK=; shift ;;
		--skip-cleanup) CLEANUP=; shift ;;
		--skip-bringup) BRINGUP=; shift ;;
		--skip-auto-copy-libs) AUTOCOPYLIBS=; shift ;;

		-a) AUTO=1; shift ;;

		-*)
			ignore+=" ${i#*-}"
			;;
		*)
			if [ -f "$i" ]; then
				# Argument is a file
				files+=" $i"
				pkgs+=" $(find_dependencies_file $i)"
			else
				# Argument is the name of a package
				pkgs+=" $i"
				pkgs+=" $(find_dependencies_package $i)"
			fi
			;;
	esac
done

# Download and unpack packages
[ "$pkgs" -o "$files" ] || {
	echo "Nothing to do";
	exit 1;
}

[ "$files" ] && {
	echo "These files will be included:"
	for i in $files; do
		echo "  $i"
	done
}

pkgs+=" xdg-utils"
[ "$pkgs" ] && {
	for i in $ignore; do
		echo "Ignoring $i..."
		pkgs=${pkgs//$i/}
	done

	for i in $pkgs; do
		pkgs=${pkgs//$i/${i%%[<>=]*}}
	done

	echo "These packages will be included:"

	for i in $pkgs; do
		echo "  $i"
	done
}


if [ "$DOWNLOAD" ]; then
	# Make sure all packages are downloaded
	for pkg in $pkgs; do
		download_package "$pkg" || exit
	done
else
	echo "Skipping download"
fi

# Find the file corresponding with each package
for i in $pkgs; do
	pkg=${i#aur:}
	file=$(find_file_for_package $pkg)

	if [ -f "$file" ]; then
		files+=" $file"
	else
	       	echo "!! Could not find file for package '$pkg'"
		exit 1
	fi
done

[ "$files" ] || {
	echo "!! No files found";
	exit 1;
}

for i in $files; do
	[ "$MainPackageVersion" ] || {
		MainPackageVersion=$(find_version_file $i)
		echo "Assuming main package is $i with version $MainPackageVersion"

		if [ "$AUTO" ]; then
			package_name=$(find_package_file $i)
			mkdir -pv "$PWD/$package_name" || exit 1
			cd "$package_name" || exit 1
		fi
	}
done

if [ "$UNPACK" ]; then
	for i in $files; do
		echo "Uncompressing $i..."
		uncompress_package_file $i
	done
else
	echo "Skipping unpack"
fi


[ "$BRINGUP" ] && {
	for i in $(ls -1 usr/share/applications/*.desktop 2>/dev/null); do
		PackageName=$(egrep Name $i | head -n1 | cut -d= -f2)
		PackageExec=$(egrep Exec $i | head -n1 | cut -d= -f2)
		PackageIcon=$(egrep Icon $i | head -n1 | cut -d= -f2)

		echo "Found .desktop file '$PackageName' ($PackageExec)"

		[ "$MainPackageExec" ] || {
			echo "  Using it as main program"
			MainPackageExec=$(basename $PackageExec)

			IconFile="./$PackageIcon"
			[ -f "$IconFile" ] || IconFile=usr/share/pixmaps/$PackageIcon
			[ -f "$IconFile" ] || IconFile=usr/share/icons/$PackageIcon
			[ -f "$IconFile" ] || IconFile=$(ls -1 usr/share/pixmaps/${PackageIcon}.png 2>/dev/null | head -n1)
			[ -f "$IconFile" ] || IconFile=$(ls -1 usr/share/icons/${PackageIcon}.png 2>/dev/null | head -n1)
			[ -f "$IconFile" ] || IconFile=$(ls -1 usr/share/pixmaps/${PackageIcon}.* 2>/dev/null | head -n1)
			[ -f "$IconFile" ] || IconFile=$(ls -1 usr/share/icons/${PackageIcon}.* 2>/dev/null | head -n1)

			if [ -f "$IconFile" ]; then
				echo "Using icon on $IconFile"
				convert -resize 48x "$IconFile" AppRun.png
				[ -f "AppRun-0.png" ] && {
					mv -v AppRun-0.png AppRun.png
					rm -v AppRun-?.png
				}
				optipng AppRun.png 2>/dev/null
			else
				echo "! Icon $PackageIcon not found" >&2
				echo "usr/share/pixmaps:" >&2
				find usr/share/pixmaps >&2
			fi
		}

		[ -f "./$PackageExec" ] && {
			echo "Patching absolute paths in ./$PackageExec"
			$pg4l_dir/patchAbsolutePaths "./$PackageExec"
		}

		[ -f AppRun.desktop ] || {
			[ "$MainPackageVersion" ] || {
				"! Main package version not found, using _VERSION_" >&2
				MainPackageVersion=_VERSION_
			}
			echo "Creating AppRun.desktop from '$PackageName $MainPackageVersion' ($i, Exec=$PackageExec)..."
			cp $pg4l_dir/AppRun.desktop .

			sed -e"s/Name=.*/Name=$PackageName $MainPackageVersion-r1$Suffix/" AppRun.desktop -i
		}

	done

	[ -f AppRun ] || {
		[ "$MainPackageExec" ] || {
			echo "! Main package executable not found, using _BINARY_"
			MainPackageExec="_BINARY_"
		}

		echo "Creating AppRun with Exec='${MainPackageExec}'..."
		cp $pg4l_dir/AppRun .
		
		sed -e"s/_BINARY_/$MainPackageExec/g" AppRun -i
		chmod +x AppRun
	}

	rm -vf usr/bin/{ar,as,nm,gprof,elfedit,ld,ld.*,objcopy,objdump,makehrtf,c++filt,addr2line,curl,*-config,*-info,png2pnm,pnm2png,ranlib,readelf,size,strings,strip,wxrc*,xml2-config,xmlcatalog,xmllint,glewinfo,visualinfo,cjpeg,desktop-file-*,djpeg,jpegtran,lua,luac,rdjpgcom,update-desktop-database,wrjpgcom}

	# Actually, patch'em all, for good measure.
	$pg4l_dir/patchAbsolutePaths usr/bin/*

	if [ $AUTOCOPYLIBS ]; then
		echo "Copying missling libraries..."
		chmod +x usr/lib/*.so*
		$pg4l_dir/copyMissingLibraries
	fi
} || {
	echo "Skipping bringup"
}


if [ "$CLEANUP" ]; then
	rubbish="etc usr/include usr/share/applications usr/share/desktop-directories usr/share/pixmaps usr/share/icons usr/share/man usr/share/info usr/share/doc usr/share/mime usr/share/aclocal usr/lib/pkgconfig usr/lib/*.a .INSTALL .PKGINFO"
	for i in $rubbish; do
		[ -e "$i" ] && {
			echo "Deleting $i..."
			rm -rf "$i"
		}
	done
else
	echo "Skipping cleanup"
fi
